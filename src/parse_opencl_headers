#!/usr/bin/ruby

DataType = Struct.new(:name, # name of the type
		      :origin, # defined where
		      :mapsto, # for typedefs
		      :comment, # comments at define time
		      :size, # size, in bytes, of the data type
		      :align, # alignment of the data type
		      :vector, # if vector type, number of components
		      :struct, # if struct, array of [member names, member types, comment]
		      :values, # hash of defined values it can take (name => [value, comment])
		     )

APICall = Struct.new(:name, # name of the API
		      :origin, # defined where
		      :introduced, # version when it was introduced
		      :deprecated, # if deprecated, version of deprecation
		      :return, # return type
		      :params, # array of parameters [type, name, comment]
		     )


$types = {}

$apis = {}

def create_type(name, *args)
	n = name.to_sym
	raise "redefining type #{n}" if $types.key? n
	$types[n] = DataType.new(n, *args)
end

def create_api(name, *args)
	n = name.to_sym
	raise "redefining API #{n}" if $apis.key? n
	$apis[n] = APICall.new(n, *args)
end

# FIXME do proper parsing of cl_platform.h, with per-compiler definitions
create_type(:cl_int,
	    ["CL/cl_platform.h".intern, nil],
	    nil, # actually depends
	    'signed 32-bit integral type',
	    4, 4, 0, nil)

def add_value(type, name, val, comment)
	types = Array === type ? type : [type]
	types.each do |tp|
		t = tp.to_sym
		raise "no such type #{tp}" unless $types.key? t
		n = name.to_sym
		v = val.to_sym
		$types[t].values ||={}
		$types[t].values[n] = [val, comment]
	end
end

def add_field(type, name, ftype, comment)
	types = Array === type ? type : [type]
	types.each do |tp|
		t = tp.to_sym
		raise "no such type #{tp}" unless $types.key? t
		n = name.to_sym
		ft = ftype.to_sym
		$types[t].struct ||= []
		$types[t].struct << [n, ft, comment]
	end
end

def add_param(func, name, ptype, comment)
	f = func.to_sym
	raise "no such API call #{func}" unless $apis.key? f
	n = name.to_sym
	pt = ptype.to_sym
	$apis[f].params ||= []
	$apis[f].params << [n, pt, comment]
end

=begin
From cl.h we want to extract three kinds of data:

* data types (beyond the OpenCL versions of the POD types, which are defined in
  `cl_platform.h` instead)
* CL_* constants (error codes, flags, etc)
* API functions

The constants are only defined in single-line declarations starting with
`#define`.
Data types are defined either in single-line declarations starting with
`typedef`, or (for `struct`s) as multi-line declarations starting with
`typedef struct`.
API functions are multi-line only, starting with `extern CL_API_ENTRY`.
Finally, we also parse comments that mark the beginning of sections in the
header file.
=end

MATCH_PARAM = %r{(?:const )?(?:unsigned )?\S+(?:\s*(?:\*+|\*?\[\]))?}
File.open('/usr/include/CL/cl.h') do |f|
	file = 'CL/cl.h'.intern
	section = nil

	datatype = nil
	typedef_struct = nil
	skipping_ifdef = false
	union = nil # cl_image_desc has an union inside, survive it

	return_type = nil
	deprecation = nil
	funcname = nil # API call name

	# multi-line callback
	callback_param = nil
	callback_pre = nil
	callback_post = nil

	f.each_line do |line|
		l = line.chomp
		if skipping_ifdef
			# keep skipping until the #endif
			skipping_ifdef = !l.start_with?('#endif')
			next
		end

		if callback_param
			callback_post += l.sub(/^\s+/, ' ')
			if callback_post.sub!(/\),\s*/, ')')
				ptype = (callback_pre + callback_post).gsub(/\s+/, ' ').intern
				add_param(funcname, callback_param, ptype, 'callback function')
				callback_param = nil
				callback_pre = nil
				callback_post = nil
			end
			next
		end

		if return_type or funcname
			raise "Incomplete API call on line #{f.lineno} of #{f.path}" if l.empty?
			case l
			when %r{^([^(\s]+)\((?:void|\s*(#{MATCH_PARAM})\s+/\*\s*(\S+)\s*\*/)}
				funcname = $1.intern
				ptype = $2 ? $2.intern : nil
				param = $2 ? $3.intern : nil
				post = $'.strip
				create_api(funcname, [file, section], deprecation, return_type, [])
				return_type = nil
				add_param(funcname, param, ptype, nil) if param
				if post.match(/^\) (\S+);/)
					$apis[funcname].introduced = $1
					funcname = nil # done
				end
			when %r{^\s+(#{MATCH_PARAM})\s+/\*\s*(\S+)\s*\*/}
				raise "Missing API call name on line #{f.lineno} of #{f.path}" unless funcname
				ptype = $1.intern
				param = $2.intern
				post = $'.strip
				add_param(funcname, param, ptype, nil)
				if post.match(/^\)\s+(\S+);/)
					$apis[funcname].introduced = $1
					funcname = nil # done
				end
			when %r{^\s+(void\s+\(CL_CALLBACK\s*\*)\s+/\*\s*(pfn_[a-z_]+|user_func)\s*\*/(\s*\)\(.*\))}
				# TODO improve matching for this
				param = $2.intern
				ptype = ($1.dup + $3.dup).intern
				add_param(funcname, param, ptype, 'callback function')
			when %r{^\s+(void\s+\(CL_CALLBACK\s*\*)\s+/\*\s*(pfn_[a-z_]+|user_func)\s*\*/(\s*\)\(.*)}
				callback_param = $2.intern
				callback_pre = $1.dup
				callback_post = $3.dup
			else
				raise "Unexpected line while parsing API call on line #{f.lineno} of #{f.path}"
			end
			next
		end

		if typedef_struct
			raise "Incomplete `typedef #{typedef_struct}` on line #{f.lineno} of #{f.path}" if l.empty?
			case l
			when /^} (\S+);/
				create_type($1.intern, [file, section], typedef_struct)
				typedef_struct = nil
			when /\s+(\S+)\s+(\S+);/
				add_field(typedef_struct, $2, $1, union)
			when /^#ifdef .*/
				skipping_ifdef = true
			when /^\s+union (\S+)?\s*{/
				union = $1 ? "(union #{$1})" : "(anonymous union)"
			when /^\s+};/
				raise "Unexpected group end while parsing `typedef #{typedef_struct}` on line #{f.lineno} of #{f.path}" if !union
				union = nil
			else
				raise "Unexpected line while parsing `typedef #{typedef_struct}` on line #{f.lineno} of #{f.path}"
			end
			next
		end

		case l
		when %r{^/\*\s+(.*?)\s+\*/$}
			# single-line comment marking either the beginning of a section,
			# or a commented, reserved value for a define
			candidate = $1
			candidate.sub!(/\s+- bitfield/,'')
			# ugh, fix typos
			candidate.sub!('qualifer','qualifier')
			dts = candidate.split(' and ').map { |s| s.intern }
			if candidate.match(/(\S+) reserved for (\S+)/)
				add_value(datatype, $2, $1, 'reserved')
			elsif candidate.match(/reserved\s+(.*)/)
				add_value(datatype, '(n/a)', $1, 'reserved')
			elsif dts.inject(true) { |istype, dt| istype && ($types.key? dt) }
				datatype = dts
				section = nil
				desc = dts.join("', '")
				puts "Defining values for '#{desc}'"
			else
				datatype = nil
				section = candidate.intern
				puts "Entering section '#{section}'"
			end
		when %r{^typedef\s+(.*?)\s+(\S+);\s*(?:/\* (.*) \*/)?}
			# single-line typedef
			mapsto = $1.intern
			name = $2.intern
			comment = $3
			origin = [file, section]
			create_type(name, origin, mapsto, comment)
			puts "Defined type '#{name}'"
		when /^typedef (struct \S+) {$/
			# begin of multi-line typedef
			typedef_struct = $1.intern
			create_type(typedef_struct,
				    [file, section]);
		when /^typedef/
			# bug out if we meet some other kind of typedef
			raise "Unknown `typedef` on line #{f.lineno} of #{f.path}"
		when %r{#define (\S+)\s+(.*?)\s*(?:/\* (.*) \*/)?$}
			# single-line define
			key = $1.intern
			value = $2
			comment = $3
			dt = datatype || :cl_int # TODO FIXME check for U, L etc suffixes
			raise "define '#{key}' in section '#{section}' also has comment '#{comment}'" if section and comment
			comment ||= section
			add_value(dt, key, value, comment)
		when /extern CL_API_ENTRY (\S+ )?(.*) CL_API_CALL/
			# API
			deprecation = $1 ? $1.strip : nil
			return_type = $2
		end
	end
end

require 'pp'
pp $types

pp $apis
